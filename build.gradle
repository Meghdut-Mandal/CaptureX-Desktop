plugins {
    id 'java'
    id 'application'
    id 'org.jetbrains.kotlin.jvm' version '2.0.21'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

// Use Java 17 toolchain for builds
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

group ''
version '1.0'

application {
    mainClass = 'BotUi'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.jetbrains.kotlin:kotlin-stdlib:2.0.21'
    implementation 'org.javacord:javacord:3.3.2'
}

// Kotlin to target JVM 17
kotlin {
    jvmToolchain(17)
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
        jvmTarget = '17'
    }
}

tasks.withType(JavaCompile).configureEach {
    options.release = 17
}

jar {
    manifest {
        attributes(
                'Main-Class': 'BotUi'
        )
    }
}
shadowJar {
    archiveBaseName.set('capturex')
    archiveClassifier.set('')
    archiveVersion.set('')
}

def generateBuildConfig = tasks.register('generateBuildConfig') {
    def outputDir = layout.buildDirectory.dir('generated/sources/buildConfig').get().asFile
    def pkg = 'de.fuerstenau.buildconfig'
    def className = 'BuildConfig'
    outputs.dir(outputDir)
    doLast {
        outputDir.mkdirs()
        def srcDir = new File(outputDir, pkg.replace('.', '/'))
        srcDir.mkdirs()
        def key = ''
        def propFile = file('capture.prop')
        if (propFile.exists()) {
            def p = new Properties()
            propFile.withInputStream { p.load(it) }
            key = p.getProperty('discord_bot_id', '')
            println("Reading bot key from file")
        } else if (System.getenv('DISCORD_KEY') != null) {
            key = System.getenv('DISCORD_KEY')
            println("Reading bot key from env")
        } else {
            println("WARNING: DISCORD_KEY not provided; using empty key for build")
            key = ''
        }
        def now = System.currentTimeMillis()
        def keyEscaped = key.replace('\\', '\\\\').replace('"', '\\"')
        def content = """
            package ${pkg};
            public final class ${className} {
                public static final String DISCORD_KEY = "${keyEscaped}";
                public static final String GITHUB_LINK = "https://github.com/nitish-rider";
                public static final long BUILD_UNIXTIME = ${now}L;
                public static final java.util.Date BUILD_DATE = new java.util.Date(${now}L);
                public static final java.time.Instant BUILD_INSTANT = java.time.Instant.ofEpochMilli(${now}L);
                private ${className}() {}
            }
        """.stripIndent()
        new File(srcDir, className + '.java').text = content
    }
}

sourceSets {
    main {
        java.srcDir(layout.buildDirectory.dir('generated/sources/buildConfig'))
    }
}

tasks.compileJava.dependsOn(generateBuildConfig)
tasks.compileKotlin.dependsOn(generateBuildConfig)

jar.dependsOn shadowJar
